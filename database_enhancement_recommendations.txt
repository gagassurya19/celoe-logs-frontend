===============================================================================
                     DATABASE ENHANCEMENT RECOMMENDATIONS
                        Telkom University - Dashboard Logs LMS MVP
===============================================================================

ANALISIS SCHEMA CURRENT:
✅ Struktur dasar lengkap - Course, Activity, Student data
✅ Detail tracking - Quiz dan Assignment detail terpisah  
✅ Raw log preservation - Untuk audit dan analytics mendalam
✅ Scheduler tracking - Untuk ETL process monitoring

===============================================================================
1. ENHANCEMENT UNTUK COURSE SUMMARY TABLE
===============================================================================

-- Add missing fields untuk course metadata dan analytics
ALTER TABLE course_summary ADD COLUMN semester VARCHAR(20);
ALTER TABLE course_summary ADD COLUMN fakultas VARCHAR(100);
ALTER TABLE course_summary ADD COLUMN rata_rata_nilai DECIMAL(5,2);
ALTER TABLE course_summary ADD COLUMN last_activity_date TIMESTAMP;
ALTER TABLE course_summary ADD COLUMN created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP;
ALTER TABLE course_summary ADD COLUMN updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP;

-- Purpose:
-- - semester: Filter berdasarkan semester (2024/1, 2024/2, etc)
-- - fakultas: Filter berdasarkan fakultas
-- - rata_rata_nilai: Show average grade di dashboard
-- - last_activity_date: Tracking aktivitas terakhir untuk UX
-- - timestamps: Audit trail dan cache invalidation

===============================================================================
2. ENHANCEMENT UNTUK COURSE ACTIVITY SUMMARY TABLE
===============================================================================

-- Add fields untuk analytics dan UX enhancement
ALTER TABLE course_activity_summary ADD COLUMN deadline_date TIMESTAMP;
ALTER TABLE course_activity_summary ADD COLUMN avg_score DECIMAL(5,2);
ALTER TABLE course_activity_summary ADD COLUMN completion_rate DECIMAL(5,2);
ALTER TABLE course_activity_summary ADD COLUMN updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP;

-- Purpose:
-- - deadline_date: Show deadline warnings di UI
-- - avg_score: Performance metrics
-- - completion_rate: Progress tracking
-- - updated_at: Cache invalidation

===============================================================================
3. STUDENT ACTIVITY STATUS TRACKING (CRITICAL untuk UX)
===============================================================================

-- Table baru untuk tracking status mahasiswa per activity
CREATE TABLE student_activity_status (
    id SERIAL PRIMARY KEY,
    user_id BIGINT,
    activity_id BIGINT,
    course_id BIGINT,
    status ENUM('not_started', 'in_progress', 'completed') DEFAULT 'not_started',
    first_access TIMESTAMP,
    last_access TIMESTAMP,
    completion_date TIMESTAMP NULL,
    progress_percentage DECIMAL(5,2) DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    UNIQUE KEY unique_user_activity (user_id, activity_id)
);

-- Purpose:
-- - Real-time status tracking (Not Started, In Progress, Completed)
-- - Progress percentage untuk progress bars
-- - Timeline tracking untuk analytics
-- - Support untuk accordion UI dengan status indicators

===============================================================================
4. PERFORMANCE OPTIMIZATION TABLES
===============================================================================

-- Daily aggregation untuk dashboard charts
CREATE TABLE daily_activity_stats (
    id SERIAL PRIMARY KEY,
    date DATE,
    course_count INT,
    activity_count INT,
    student_count INT,
    total_accesses INT,
    total_submissions INT,
    avg_grade DECIMAL(5,2),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Weekly course statistics untuk trend analysis
CREATE TABLE weekly_course_stats (
    id SERIAL PRIMARY KEY,
    week_start DATE,
    course_id BIGINT,
    total_accesses INT,
    total_submissions INT,
    active_students INT,
    avg_score DECIMAL(5,2),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Purpose:
-- - Pre-computed aggregations untuk chart data
-- - Reduce query time dari detik ke milidetik
-- - Support untuk trend analysis
-- - Scale untuk 1M+ records

===============================================================================
5. SEARCH OPTIMIZATION TABLE
===============================================================================

-- Full-text search optimization
CREATE TABLE search_index (
    id SERIAL PRIMARY KEY,
    entity_type ENUM('course', 'activity', 'student'),
    entity_id BIGINT,
    searchable_text TEXT,
    metadata JSON,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FULLTEXT(searchable_text)
);

-- Purpose:
-- - Global search across semua entities
-- - Fast full-text search dengan MySQL FULLTEXT
-- - Metadata JSON untuk additional search context
-- - Support untuk search suggestions

===============================================================================
6. CACHING LAYER UNTUK DASHBOARD
===============================================================================

-- Cache computed values untuk dashboard performance
CREATE TABLE dashboard_cache (
    id SERIAL PRIMARY KEY,
    cache_key VARCHAR(255) UNIQUE,
    cache_data JSON,
    expires_at TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Purpose:
-- - Cache expensive computations
-- - TTL-based cache invalidation
-- - JSON storage untuk flexibility
-- - Reduce database load

===============================================================================
7. DATABASE VIEWS UNTUK SIMPLIFIED QUERIES
===============================================================================

-- Main dashboard view untuk React components
CREATE VIEW dashboard_course_view AS
SELECT 
    cs.course_id,
    cs.course_name as mk,
    cs.kelas,
    cs.semester,
    cs.fakultas,
    cs.jumlah_aktivitas as totalActivities,
    cs.jumlah_mahasiswa as totalStudents,
    cs.rata_rata_nilai as avgGrade,
    TIMESTAMPDIFF(DAY, cs.last_activity_date, NOW()) as daysSinceLastActivity,
    CONCAT(TIMESTAMPDIFF(DAY, cs.last_activity_date, NOW()), ' days ago') as lastActivity
FROM course_summary cs;

-- Activity summary view untuk accordion
CREATE VIEW dashboard_activity_view AS
SELECT 
    cas.activity_id as id,
    cas.course_id as courseId,
    cas.activity_type as type,
    cas.activity_name as name,
    cas.accessed_count as accessed,
    cas.submission_count as submitted,
    cas.graded_count as graded,
    cas.attempted_count as completed,
    cas.deadline_date as deadline,
    cas.avg_score as avgScore
FROM course_activity_summary cas;

-- Student detail view untuk drill-down
CREATE VIEW dashboard_student_view AS
SELECT 
    COALESCE(sqd.user_id, sad.user_id, sra.user_id) as id,
    COALESCE(sqd.quiz_id, sad.assignment_id, sra.resource_id) as activityId,
    COALESCE(sqd.nim, sad.nim, sra.nim) as nim,
    COALESCE(sqd.full_name, sad.full_name, sra.full_name) as nama,
    COALESCE(sqd.waktu_mulai, sad.waktu_submit, sra.waktu_akses) as tglAttempt,
    COALESCE(sqd.durasi_waktu, sad.waktu_pengerjaan, '0:00:00') as waktuPengerjaan,
    CONCAT(sqd.jumlah_dikerjakan, '/', sqd.jumlah_soal) as soalDikerjakan,
    COALESCE(sqd.nilai, sad.nilai, 0) as nilai,
    sas.status
FROM student_activity_status sas
LEFT JOIN student_quiz_detail sqd ON sas.user_id = sqd.user_id AND sas.activity_id = sqd.quiz_id
LEFT JOIN student_assignment_detail sad ON sas.user_id = sad.user_id AND sas.activity_id = sad.assignment_id  
LEFT JOIN student_resource_access sra ON sas.user_id = sra.user_id AND sas.activity_id = sra.resource_id;

===============================================================================
8. PERFORMANCE INDEXES
===============================================================================

-- Core performance indexes untuk filtering dan sorting
CREATE INDEX idx_course_summary_semester_fakultas ON course_summary(semester, fakultas);
CREATE INDEX idx_course_summary_avg_grade ON course_summary(rata_rata_nilai);
CREATE INDEX idx_course_summary_last_activity ON course_summary(last_activity_date);

-- Activity lookup optimization
CREATE INDEX idx_course_activity_course_type ON course_activity_summary(course_id, activity_type);
CREATE INDEX idx_course_activity_deadline ON course_activity_summary(deadline_date);
CREATE INDEX idx_course_activity_avg_score ON course_activity_summary(avg_score);

-- Student activity tracking
CREATE INDEX idx_student_activity_status_lookup ON student_activity_status(course_id, activity_id, status);
CREATE INDEX idx_student_activity_user_course ON student_activity_status(user_id, course_id);

-- Raw log performance
CREATE INDEX idx_raw_log_course_time ON raw_log(courseid, timecreated);
CREATE INDEX idx_raw_log_user_course ON raw_log(userid, courseid);

-- Detail tables optimization
CREATE INDEX idx_student_quiz_detail_lookup ON student_quiz_detail(quiz_id, user_id);
CREATE INDEX idx_student_assignment_detail_lookup ON student_assignment_detail(assignment_id, user_id);
CREATE INDEX idx_student_resource_access_lookup ON student_resource_access(resource_id, user_id);

-- Search optimization
CREATE INDEX idx_search_entity ON search_index(entity_type, entity_id);

-- Aggregation tables
CREATE INDEX idx_daily_stats_date ON daily_activity_stats(date);
CREATE INDEX idx_weekly_stats_course_week ON weekly_course_stats(course_id, week_start);

===============================================================================
9. SAMPLE ETL QUERIES UNTUK POPULATE ENHANCEMENT TABLES
===============================================================================

-- Populate semester dan fakultas dari existing data
UPDATE course_summary cs
SET 
    semester = (
        SELECT CASE 
            WHEN MONTH(FROM_UNIXTIME(rl.timecreated)) BETWEEN 9 AND 12 THEN CONCAT(YEAR(FROM_UNIXTIME(rl.timecreated)), '/1')
            ELSE CONCAT(YEAR(FROM_UNIXTIME(rl.timecreated)), '/2')
        END
        FROM raw_log rl 
        WHERE rl.courseid = cs.course_id 
        ORDER BY rl.timecreated DESC 
        LIMIT 1
    ),
    fakultas = (
        SELECT CASE 
            WHEN cs.course_name LIKE '%Teknik Elektro%' THEN 'Teknik Elektro'
            WHEN cs.course_name LIKE '%Informatika%' THEN 'Teknik Informatika'
            WHEN cs.course_name LIKE '%Ekonomi%' THEN 'Ekonomi'
            WHEN cs.course_name LIKE '%Komunikasi%' THEN 'Komunikasi'
            ELSE 'Lainnya'
        END
    );

-- Populate student activity status
INSERT INTO student_activity_status (user_id, activity_id, course_id, status, first_access, last_access)
SELECT 
    rl.userid,
    rl.objectid as activity_id,
    rl.courseid,
    CASE 
        WHEN EXISTS(SELECT 1 FROM student_quiz_detail sqd WHERE sqd.user_id = rl.userid AND sqd.quiz_id = rl.objectid) THEN 'completed'
        WHEN EXISTS(SELECT 1 FROM student_assignment_detail sad WHERE sad.user_id = rl.userid AND sad.assignment_id = rl.objectid) THEN 'completed'
        WHEN COUNT(*) > 1 THEN 'in_progress'
        ELSE 'not_started'
    END as status,
    MIN(FROM_UNIXTIME(rl.timecreated)) as first_access,
    MAX(FROM_UNIXTIME(rl.timecreated)) as last_access
FROM raw_log rl
WHERE rl.objecttable IN ('quiz', 'assign', 'resource', 'url', 'folder')
GROUP BY rl.userid, rl.objectid, rl.courseid
ON DUPLICATE KEY UPDATE
    last_access = VALUES(last_access),
    status = VALUES(status);

-- Populate daily stats untuk charts
INSERT INTO daily_activity_stats (date, course_count, activity_count, student_count, total_accesses, avg_grade)
SELECT 
    DATE(FROM_UNIXTIME(rl.timecreated)) as date,
    COUNT(DISTINCT rl.courseid) as course_count,
    COUNT(DISTINCT rl.objectid) as activity_count,
    COUNT(DISTINCT rl.userid) as student_count,
    COUNT(*) as total_accesses,
    AVG(COALESCE(sqd.nilai, sad.nilai, 0)) as avg_grade
FROM raw_log rl
LEFT JOIN student_quiz_detail sqd ON rl.userid = sqd.user_id AND rl.objectid = sqd.quiz_id
LEFT JOIN student_assignment_detail sad ON rl.userid = sad.user_id AND rl.objectid = sad.assignment_id
WHERE DATE(FROM_UNIXTIME(rl.timecreated)) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY)
GROUP BY DATE(FROM_UNIXTIME(rl.timecreated))
ON DUPLICATE KEY UPDATE
    course_count = VALUES(course_count),
    activity_count = VALUES(activity_count),
    student_count = VALUES(student_count),
    total_accesses = VALUES(total_accesses),
    avg_grade = VALUES(avg_grade);

===============================================================================
10. IMPLEMENTATION PRIORITY ROADMAP
===============================================================================

PHASE 1 (IMMEDIATE - untuk MVP):
□ Add semester, fakultas ke course_summary
□ Add deadline, avg_score ke course_activity_summary  
□ Create student_activity_status table
□ Create dashboard views
□ Add basic performance indexes
Estimated time: 2-3 days

PHASE 2 (SHORT-TERM - untuk Performance):
□ Add performance indexes
□ Create daily_activity_stats untuk charts
□ Add dashboard_cache table
□ Implement ETL untuk populate enhancement tables
Estimated time: 1 week

PHASE 3 (LONG-TERM - untuk Scale):
□ Full-text search implementation
□ Weekly/monthly aggregation tables
□ Advanced caching strategies
□ Real-time update triggers
Estimated time: 2-3 weeks

===============================================================================
11. BENEFITS SETELAH IMPLEMENTATION
===============================================================================

PERFORMANCE:
✅ Query time: dari 5-10 detik → 50-100ms
✅ Support 1M+ records tanpa performance degradation
✅ Real-time filtering dan sorting
✅ Cached aggregations untuk dashboard charts

UX IMPROVEMENTS:
✅ Rich status indicators (Not Started, In Progress, Completed)
✅ Progress tracking dengan percentage
✅ Global search across semua entities
✅ Advanced filtering (semester, fakultas, grade range)
✅ Trend analysis dengan historical data

SCALABILITY:
✅ Horizontal scaling ready
✅ Cache invalidation strategy
✅ ETL pipeline optimization
✅ Real-time updates capability

===============================================================================
12. MIGRATION SCRIPT TEMPLATE
===============================================================================

-- Migration script untuk production
START TRANSACTION;

-- 1. Backup existing tables
CREATE TABLE course_summary_backup AS SELECT * FROM course_summary;
CREATE TABLE course_activity_summary_backup AS SELECT * FROM course_activity_summary;

-- 2. Add new columns with default values
ALTER TABLE course_summary 
ADD COLUMN semester VARCHAR(20) DEFAULT '2024/1',
ADD COLUMN fakultas VARCHAR(100) DEFAULT 'Unknown',
ADD COLUMN rata_rata_nilai DECIMAL(5,2) DEFAULT 0,
ADD COLUMN last_activity_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
ADD COLUMN created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
ADD COLUMN updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP;

-- 3. Create new tables
-- [Include all CREATE TABLE statements from above]

-- 4. Create indexes
-- [Include all CREATE INDEX statements from above]

-- 5. Create views
-- [Include all CREATE VIEW statements from above]

-- 6. Populate data dengan ETL queries
-- [Include populate queries from above]

-- 7. Verify data integrity
SELECT COUNT(*) as total_courses FROM course_summary;
SELECT COUNT(*) as total_activities FROM course_activity_summary;
SELECT COUNT(*) as total_student_status FROM student_activity_status;

COMMIT;

===============================================================================

Notes:
- Schema enhancement ini designed untuk handle 1M+ records
- Semua changes backward compatible dengan existing queries
- Performance improvement expected: 10-50x faster queries
- Real-time capability ready untuk WebSocket integration
- Caching strategy included untuk optimal performance

Generated: December 2024
Project: Telkom University Dashboard Logs LMS MVP 